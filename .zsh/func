# ~/.zsh/func
#
# my zsh functions
#
# created on 2014.10.06.
# updated on 2025.02.12.

# list files changed in given days
# (referenced: http://gotofritz.net/blog/howto/finding-recently-changed-files-osx-terminal/)
ls-changed-in-days () {
	if [[ $1 && -x $2 ]]; then
		echo "> listing files modified in $1 day(s): $2"

		find $2 -type f -mtime -$1 -print0 | xargs -0 du -sk | sort -nr
	else
		echo "* usage: $0 NUM_DAYS DIR_PATH"
	fi
}

update-macos () {
	# macOS updates
	echo
	echo "> checking for macOS software updates..."
	softwareupdate --all --install --force

	# mac appstore
	if [[ -x `which mas` ]]; then
		echo
		echo "> updating Mac App Store apps..."
		mas upgrade
	fi

	# homebrew
	if [[ -x `which brew` ]]; then
		echo
		echo "> updating brew..."
		brew update
		brew upgrade

		echo
		echo "> cleaning brew..."
		brew cleanup
	else
		echo
		echo "* brew not installed"
	fi
}

update-termux () {
	pkg upgrade && \
		pkg clean && \
		pkg autoclean
}

update-linux () {
	if [ -x /usr/bin/apt-get ]; then
		sudo apt-get update && \
			sudo apt-get -y upgrade && \
			sudo apt-get -y autoremove && \
			sudo apt-get -y autoclean
	elif [ -x /usr/bin/pacman ]; then
		sudo pacman -Syu && \
			sudo paccache -ruk0
	fi
}

# update bundle, brew, brew cask and everything!
update-all () {
	case "$OSTYPE" in
		darwin*) update-macos ;;
		linux-android) update-termux ;;
		linux*) update-linux ;;
	esac

	# update go packages and clean module caches
	if [[ -x `which goget` ]]; then
		echo
		echo "> updating go packages..."
		goget

		echo
		echo "> cleaning go module caches..."
		go clean -modcache

		echo
		echo "> cleaning go caches..."
		go clean -cache
	fi

	# upgrade oh-my-zsh
	omz update

	# update asdf plugins
	if [[ -d "$ASDF_DIR/bin" ]]; then
		#asdf update # NOTE: does not work since v0.16.0 of asdf-vm

		asdf plugin update --all
		asdf reshim

		# list outdated ones
		asdf latest --all | grep missing
	fi

	# pull this repository
	(
		cd ~ && git checkout master && git pull origin master
	)
}

# list go imports
list-go-imports () {
	if [[ $1 && $1 == '--all' ]]; then
		# show all (including standard packages)
		go list -f '{{join .Deps "\n"}}' | xargs go list -f '{{.ImportPath}}'
	else
		# not including standard
		go list -f '{{join .Deps "\n"}}' | xargs go list -f '{{if not .Standard}}{{.ImportPath}}{{end}}'
	fi
}

